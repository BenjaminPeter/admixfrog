from collections import Counter
from os import path

configfile: "config/config.yaml"
configfile: "config/data.yaml"
configfile: "config/panels.yaml"
configfile: "config/regions.yaml"

CHROMS = [str(i+1) for i in range(22)] + ["X"]




rule admixfrog_sample_input:
    input :
        ref = "ref/ref_{snpset}.csv.xz",
        bam = "bams/{snpset}/{sample}.bam",
        bai = "bams/{snpset}/{sample}.bam.bai"
    params:
        cutoff = 3,
        length_bin = 35
    output:
        csv = "samples/{sample}_{snpset}.in.xz"
    shell:
        "admixfrog_bam --ref {input.ref} --bamfile {input.bam} --force-bam"
        " --deam-cutoff {params.cutoff} "
        " --out {output.csv} " 
        " --length-bin-size {params.length_bin} "

rule run_admixfrog:
    input:
        infile = "samples/{sample}_{snpset}.in.xz",
        ref = "ref/ref_{snpset}.csv.xz",
    params:
        cont_id = "AFR",
        ll_tol = 1e-2,
        freq_f = 5,
        freq_c = 5,
        error = 1e-2,
        ancestral = "PAN",
    benchmark:
        "benchmarks/admixfrog/{sample}_{bin_size}_{states}_{snpset}.log",
    version: ".3"
    log : 
        log="admixfrog/{bin_size}/{states}/{sample}_{snpset}.log"
    output:
        res_bin = "admixfrog/{bin_size}/{states}/{sample}_{snpset}.bin.xz",
        res_snp = "admixfrog/{bin_size}/{states}/{sample}_{snpset}.snp.xz",
        res_cont= "admixfrog/{bin_size}/{states}/{sample}_{snpset}.cont.xz",
        res_par = "admixfrog/{bin_size}/{states}/{sample}_{snpset}.pars.xz",
        res_rle = "admixfrog/{bin_size}/{states}/{sample}_{snpset}.rle.xz",
    run:
        outname = path.splitext(path.splitext(output.res_bin)[0])[0]
        states = wildcards.states.split("_")
        s = "admixfrog --infile {input.infile} --ref {input.ref} -o {outname} "
        s += " --state-ids {states} "
        s += " --cont-id {params.cont_id} "
        s += " --ll-tol {params.ll_tol} "
        s += " --bin-size {wildcards.bin_size} "
        s += " --est-F --freq-F {params.freq_f} "
        s += " --freq-contamination {params.freq_c} "
        s += " --e0 {params.error} "
        s += " --ancestral {params.ancestral} "
        shell(s)

""" BAM STUFF"""
rule index_bam:
    input: "{name}.bam"
    output: "{name}.bam.bai"
    shell: "samtools index {input}"

"""plotting"""
rule plot_hmm_sample_overview:
    input:
        bin = "admixfrog/{bin_size}/{states}/{sample}_{snpset}.bin.xz",
        #snp = "admixfrog/{bin_size}/{states}/{sample}_{snpset}.snp.xz",
        snp = "samples/{sample}_{snpset}.in.xz",
        script_ = "scripts/plotting/hmm_overview.R"
    params:
        pmax = 0.7, #state with avg posterior larger than this is omitted
        pmin = 1e-3 #states with avg posterior lower than this are omitted
    output:
        png = "figures/{states}/{sample}_overview_{bin_size, \d+}_{snpset}.png",
    script:
        "scripts/plotting/hmm_overview.R"

rule plot_hmm_sample_multitrack:
    input:
        bin = "admixfrog/{bin_size}/{states}/{sample}_{snpset}.bin.xz",
        snp = "admixfrog/{bin_size}/{states}/{sample}_{snpset}.snp.xz",
        script_ = "scripts/plotting/hmm_overview.R"
    output:
        png = "figures/{states}/{sample}_mt{TRACK}__{bin_size, \d+}_{snpset}.png",
    script:
        "scripts/plotting/hmm_overview.R"

rule plot_hmm_sample_cont:
    input:
        cont = "admixfrog/{bin_size}/{states}/{sample}_{snpset}.cont.xz",
        script_ = "scripts/plotting/hmm_cont.R"
    output:
        png = "figures/{states}/{sample}_cont_{bin_size,\d+}_{snpset}.png",
    script:
        "scripts/plotting/hmm_cont.R"

def _panel_bin(wc):
    l = expand("admixfrog/{bin_size}/{states}/{sample}_{snpset}.bin.xz",
        bin_size=["{bin_size}"],
        states=["{states}"],
        snpset=["{snpset}"],
        sample=config['panels'][wc.panel])
    return l
rule plot_hmm_panel_marginal:
    input:
        bins = _panel_bin,
        script_ = "scripts/plotting/hmm_panel_marginal.R"
    output:
        plot="figures/{states}/{panel}_marginal_{bin_size,\d+}_{snpset}.png",
        plot2="figures/{states}/{panel}_marginal2_{bin_size,\d+}_{snpset}.png",
    script:
        "scripts/plotting/hmm_panel_marginal.R"

rule plot_hmm_panel_region:
    input:
        bins = _panel_bin,
        script_ = "scripts/plotting/hmm_region.R",
	colors = "scripts/plotting/cols.rds"
    params:
        pmax = 0.7,
        pmin = 1e-4
    output:
        plot = "figures_region/{region}/{states}/{panel}_{bin_size,\d+}_{snpset}.png",
    script:
        "scripts/plotting/hmm_region.R"

rule plot_hmm_panel_pw:
    input:
        bins = _panel_bin,
        script_ = "scripts/plotting/hmm_panel_pw.R"
    params:
        lengths= [0, 500, 1000, 1500] # in kb
    output:
        pwplot="figures/{states}/{TRACK}/C{cutoff}/{panel}_pwall_{bin_size,\d+}_{snpset}.png",
        trackplot="figures/{states}/{TRACK}/C{cutoff}/{panel}_trackall_{bin_size,\d+}_{snpset}.png",
    script:
        "scripts/plotting/hmm_panel_pw.R"

"""not done"""

rule plot_hmm_panel_rle:
    input:
        bins = _panel_bin,
        script_ = "scripts/plotting/hmm_rle.R"
    output:
        rleplot="figures/{states}/{TRACK}/{cutoff}/{panel}_rle_{bin_size,\d+}_{snpset}.png",
        rlelogplot="figures/{states}/{TRACK}/{cutoff}/{panel}_rll_{bin_size,\d+}_{snpset}.png",
        gammaplot="figures/{states}/{TRACK}/{cutoff}/{panel}_gamma_{bin_size,\d+}_{snpset}.png",
    script:
        "scripts/plotting/hmm_rle.R"

"""CONTROLLERS"""
def _panel_all_cont(wc):
    s1= expand("figures/{{states}}/{sample}_cont_{{bin_size,\d+}}_{{snpset}}.png",
        sample = config['panels'][wc.panel])
    s2= expand("figures/{{states}}/{sample}_overview_{{bin_size,\d+}}_{{snpset}}.png",
        sample = config['panels'][wc.panel])
    return s1 + s2
rule plot_hmm_panel_all:
    input:
        marg = "figures/{states}/{panel}_marginal_{bin_size,\d+}_{snpset}.png",
        bysample = _panel_all_cont,
    output:
        touch("controller/{states}/{panel}_{bin_size,\d+}_{snpset}.figs")

def _panel_all_track(wc):
    s3= expand("figures/{{states}}/{sample}_mt__{{TRACK}}__{{bin_size,\d+}}_{{snpset}}.png",
        sample = config['panels'][wc.panel])
    return s3
rule plot_hmm_panel_track:
    input:
        x = _panel_all_track,
        rleplot="figures/hmm/{states}/{TRACK}/{cutoff}/{panel}_rle_{bin_size,\d+}_{snpset}.png",
        trackplot="figures/hmm/{states}/{TRACK}/{cutoff}/{panel}_trackall_{bin_size,\d+}_{snpset}.png",
    output:
        touch("controller/track/{states}/{TRACK}/{cutoff}/{panel}_{bin_size,\d+}_{snpset}.figs")
