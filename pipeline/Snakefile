from collections import Counter
from os import path

configfile: "config/config.yaml"
configfile: "config/data.yaml"
configfile: "config/panels.yaml"
configfile: "config/regions.yaml"

CHROMS = [str(i+1) for i in range(22)] + ["X"]




rule admixfrog_sample_input:
    input :
        ref = "ref/ref_{snpset}.csv.xz",
        bam = "bams/{snpset}/{sample}.bam",
        bai = "bams/{snpset}/{sample}.bam.bai",
#        bam = "bams2/{sample}.bam",
#        bai = "bams2/{sample}.bam.bai"
#        bam = "bams3/{sample}.bam",
#        bai = "bams3/{sample}.bam.bai",
    params:
        cutoff = 3,
        length_bin = 35
    output:
        csv = "samples/{sample}_{snpset}.in.xz"
    shell:
        "admixfrog_bam --ref {input.ref} --bamfile {input.bam} --force-bam"
        " --deam-cutoff {params.cutoff} "
        " --out {output.csv} " 
        " --length-bin-size {params.length_bin} "

rule run_admixfrog:
    input:
        infile = "samples/{sample}_{snpset}.in.xz",
        ref = "ref/ref_{snpset}.csv.xz",
    params:
        cont_id = "AFR",
        ll_tol = 1e-2,
        freq_f = 3,
        freq_c = 3,
        error = 1e-2,
        ancestral = "PAN",
        run_penalty = 0.4,
        max_iter = 250,
        n_post_rep = 200,
    benchmark:
        "benchmarks/admixfrog/{sample}_{bin_size}_{states}_{snpset}.log",
    version: ".3"
    log : 
        log="admixfrog/{bin_size}/{states}/{sample}_{snpset}.log"
    output:
        res_bin = "admixfrog/{bin_size}/{states}/{sample}_{snpset}.bin.xz",
        res_snp = "admixfrog/{bin_size}/{states}/{sample}_{snpset}.snp.xz",
        res_cont= "admixfrog/{bin_size}/{states}/{sample}_{snpset}.cont.xz",
        res_par = "admixfrog/{bin_size}/{states}/{sample}_{snpset}.pars.xz",
        res_rle = "admixfrog/{bin_size}/{states}/{sample}_{snpset}.rle.xz",
        res_res = "admixfrog/{bin_size}/{states}/{sample}_{snpset}.res.xz",
    run:
        outname = path.splitext(path.splitext(output.res_bin)[0])[0]
        states = wildcards.states.split("_")
        s = "admixfrog --infile {input.infile} --ref {input.ref} -o {outname} "
        s += " --states {states} "
        s += " --cont-id {params.cont_id} "
        s += " --ll-tol {params.ll_tol} "
        s += " --bin-size {wildcards.bin_size} "
        s += " --est-F --est-tau --freq-F {params.freq_f} "
        s += " --freq-contamination {params.freq_c} "
        s += " --e0 {params.error} "
        s += " --ancestral {params.ancestral} "
        s += " --run-penalty {params.run_penalty}"
        s += " --max-iter {params.max_iter}"
        s += " --n-post-replicates {params.n_post_rep}"
        s += " --female"
        shell(s)

rule call_runs:
    input:
        rle = "admixfrog/{bin_size}/{states}/{sample}_{snpset}.bin.xz",
    params:
        run_penalty = 0.25,
    output:
       #rle = "rle/{bin_size}/{states}/{sample}_{snpset}.rle.xz",
       rle = "rle/{bin_size}/{states}/{sample}_{snpset}.rle{penalty}.xz",
    shell: 
        "admixfrog_rle --out {output.rle} --in {input.rle} "
        #"--run-penalty {params.run_penalty} "
        "--run-penalty {wildcards.penalty} "

""" BAM STUFF"""
rule index_bam:
    input: "{name}.bam"
    output: "{name}.bam.bai"
    shell: "samtools index {input}"

"""plotting"""
rule plot_hmm_sample_overview:
    input:
        bin = "admixfrog/{bin_size}/{states}/{sample}_{snpset}.bin.xz",
        #snp = "admixfrog/{bin_size}/{states}/{sample}_{snpset}.snp.xz",
        snp = "samples/{sample}_{snpset}.in.xz",
        script_ = "scripts/plotting/hmm_overview.R"
    params:
        pmax = 0.7, #state with avg posterior larger than this is omitted
        pmin = 1e-4 #states with avg posterior lower than this are omitted
    output:
        posplot = "figures/{states}/{sample}_overview_pos_{bin_size, \d+}_{snpset}.png",
        mapplot = "figures/{states}/{sample}_overview_map_{bin_size, \d+}_{snpset}.png",
    script:
        "scripts/plotting/hmm_overview.R"

rule plot_hmm_sample_runs:
    input:
        rle = "rle/{bin_size}/{states}/{sample}_{snpset}.rle{penalty}.xz",
        script_ = "scripts/plotting/hmm_runs.R"
    params:
        pmax = 0.7, #state with avg posterior larger than this is omitted
        pmin = 1e-4, #states with avg posterior lower than this are omitted
        lmin = 0.05,
        lmax = 1,
    output:
        #posplot = "figures/{states}/{sample}_overview_pos_{bin_size, \d+}_{snpset}.png",
        mapplot = "figures/{states}/{sample}_runs_map_{bin_size, \d+}_{snpset}_{penalty}.png",
    script:
        "scripts/plotting/hmm_runs.R"

rule plot_hmm_sample_multitrack:
    input:
        bin = "admixfrog/{bin_size}/{states}/{sample}_{snpset}.bin.xz",
        snp = "admixfrog/{bin_size}/{states}/{sample}_{snpset}.snp.xz",
        script_ = "scripts/plotting/hmm_overview.R"
    output:
        png = "figures/{states}/{sample}_mt{TRACK}__{bin_size, \d+}_{snpset}.png",
        posplot = "figures/{states}/{sample}_mtpos{TRACK}__{bin_size, \d+}_{snpset}.png",
        mapplot = "figures/{states}/{sample}_mtmap{TRACK}__{bin_size, \d+}_{snpset}.png",
    script:
        "scripts/plotting/hmm_overview.R"

rule plot_hmm_sample_cont:
    input:
        cont = "admixfrog/{bin_size}/{states}/{sample}_{snpset}.cont.xz",
        script_ = "scripts/plotting/hmm_cont.R"
    output:
        png = "figures/{states}/{sample}_cont_{bin_size,\d+}_{snpset}.png",
    script:
        "scripts/plotting/hmm_cont.R"

def _panel_bin(wc):
    l = expand("admixfrog/{bin_size}/{states}/{sample}_{snpset}.bin.xz",
        bin_size=["{bin_size}"],
        states=["{states}"],
        snpset=["{snpset}"],
        sample=config['panels'][wc.panel])
    return l
def _panel_rle(wc):
    #l = expand("rle/{bin_size}/{states}/{sample}_{snpset}.rle.xz",
    l = expand("rle/{bin_size}/{states}/{sample}_{snpset}.rle{{penalty}}.xz",
        bin_size=["{bin_size}"],
        states=["{states}"],
        snpset=["{snpset}"],
        sample=config['panels'][wc.panel])
    return l
def _panel_rle2(wc):
    l = expand("admixfrog/{bin_size}/{states}/{sample}_{snpset}.res.xz",
        bin_size=["{bin_size}"],
        states=["{states}"],
        snpset=["{snpset}"],
        sample=config['panels'][wc.panel])
    return l
rule plot_hmm_panel_marginal:
    input:
        bins = _panel_bin,
        script_ = "scripts/plotting/hmm_panel_marginal.R"
    output:
        plot="figures/{states}/{panel}_marginal_{bin_size,\d+}_{snpset}.png",
        plot2="figures/{states}/{panel}_marginal2_{bin_size,\d+}_{snpset}.png",
    script:
        "scripts/plotting/hmm_panel_marginal.R"

rule plot_hmm_panel_region:
    input:
        bins = _panel_bin,
        script_ = "scripts/plotting/hmm_region.R",
        colors = "scripts/plotting/cols.rds"
    params:
        pmax = 0.7,
        pmin = 1e-4
    output:
        posplot = "figures_region/{region}/{states}/{panel}_{bin_size,\d+}_{snpset}_pos.png",
        mapplot = "figures_region/{region}/{states}/{panel}_{bin_size,\d+}_{snpset}_map.png",
    script:
        "scripts/plotting/hmm_region.R"

rule plot_hmm_panel_pw:
    input:
        rle = _panel_rle,
        bins = _panel_bin,
        script_ = "scripts/plotting/hmm_panel_pw.R"
    params:
        lengths= [0, .33, .66, 1, 1.33, 1.66] # in cM
    output:
        pwplot="figures/{states}/{type}_{target}_{penalty}/{panel}_pwcor_{bin_size,\d+}_{snpset}.png",
        pwplot2="figures/{states}/{type}_{target}_{penalty}/{panel}_pwamount_{bin_size,\d+}_{snpset}.png",
        trackplot="figures/{states}/{type}_{target}_{penalty}/{panel}_trackall_{bin_size,\d+}_{snpset}.png",
        trackfull="figures/{states}/{type}_{target}_{penalty}/{panel}_trackfull_{bin_size,\d+}_{snpset}.png",
        tracksimple="figures/{states}/{type}_{target}_{penalty}/{panel}_tracksimple_{bin_size,\d+}_{snpset}.png",
    script:
        "scripts/plotting/hmm_panel_pw.R"

"""not done"""

rule plot_hmm_panel_rle2:
    input:
        rle = _panel_rle2,
        ages = 'config/ages.yaml',
        script_ = "scripts/plotting/hmm_rlepred.R"
    params:
        #trunc = 0.1,
        xmax=2.5,
        generation_time = 30,
    output:
        rleplot="figures/{states}/{target}__{trunc}/{panel}_rle_{bin_size,\d+}_{snpset}.png",
        rlelogplot="figures/{states}/{target}__{trunc}/{panel}_rll_{bin_size,\d+}_{snpset}.png",
        gammaplot="figures/{states}/{target}__{trunc}/{panel}_gamma_{bin_size,\d+}_{snpset}.png",
        fit="tables/{states}/{target}__{trunc}/{panel}_rle_{bin_size,\d+}_{snpset}.csv.gz",
    script:
        "scripts/plotting/hmm_rlepred.R"
rule plot_hmm_panel_rle:
    input:
        rle = _panel_rle,
        ages = 'config/ages.yaml',
        script_ = "scripts/plotting/hmm_rle.R"
    params:
        #trunc = 0.1,
        xmax=4,
        generation_time = 29,
        type = 'state',
    output:
        #rleplot="figures/{states}/{target}/{panel}_rle_{bin_size,\d+}_{snpset}.png",
        #rlelogplot="figures/{states}/{target}/{panel}_rll_{bin_size,\d+}_{snpset}.png",
        #gammaplot="figures/{states}/{target}/{panel}_gamma_{bin_size,\d+}_{snpset}.png",
        #fit="tables/{states}/{target}/{panel}_rle_{bin_size,\d+}_{snpset}.csv.gz",
        rleplot="figures/{states}/{target}_{penalty}_{trunc}/{panel}_rle_{bin_size,\d+}_{snpset}.png",
        rlelogplot="figures/{states}/{target}_{penalty}_{trunc}/{panel}_rll_{bin_size,\d+}_{snpset}.png",
        gammaplot="figures/{states}/{target}_{penalty}_{trunc}/{panel}_gamma_{bin_size,\d+}_{snpset}.png",
        fit="tables/{states}/{target}_{penalty}_{trunc}/{panel}_rle_{bin_size,\d+}_{snpset}.csv.gz",
    script:
        "scripts/plotting/hmm_rle.R"
rule all_rle_panels:
    input: 
        expand("figures/AFR_VIN_DEN/VIN_{penalty}_{trunc}/mhsmall_rle_10000_archaicadmixture.png",
                penalty = [0.01, 0.05, 0.1, 0.2, 0.3, 0.4, 0.5],
                trunc = [0, 0.02, 0.04, 0.06, 0.08, 0.1, 0.2])

"""CONTROLLERS"""
def _panel_all_by_obs(wc):
    s1= expand("figures/{{states}}/{sample}_cont_{{bin_size,\d+}}_{{snpset}}.png",
        sample = config['panels'][wc.panel])
    s2= expand("figures/{{states}}/{sample}_{coords}_{{bin_size, \d+}}_{{snpset}}.png",
        coords=['overview_map', 'overview_pos'],
        sample = config['panels'][wc.panel])
    s3= expand("figures/{{states}}/{sample}_{coords}_{{bin_size, \d+}}_{{snpset}}_{penalty}.png",
        coords=['runs_map'],
        penalty=[0.01, 0.05, 0.1, 0.2, 0.3, 0.4, 0.5],
        sample = config['panels'][wc.panel])
    return s1 + s2 + s3
rule plot_hmm_panel_all: 
    input: 
        marg = "figures/{states}/{panel}_marginal_{bin_size,\d+}_{snpset}.png",
        bysample = _panel_all_by_obs,
    output:
        touch("controller/{states}/{panel}_{bin_size,\d+}_{snpset}.figs")

def _panel_all_track(wc):
    s3= expand("figures/{{states}}/{sample}_mt__{{TRACK}}__{{bin_size,\d+}}_{{snpset}}.png",
        sample = config['panels'][wc.panel])
    return s3
rule plot_hmm_panel_track:
    input:
        x = _panel_all_track,
        rleplot="figures/hmm/{states}/{TRACK}/{cutoff}/{panel}_rle_{bin_size,\d+}_{snpset}.png",
        trackplot="figures/hmm/{states}/{TRACK}/{cutoff}/{panel}_trackall_{bin_size,\d+}_{snpset}.png",
    output:
        touch("controller/track/{states}/{TRACK}/{cutoff}/{panel}_{bin_size,\d+}_{snpset}.figs")
